// import { Checkbox } from "@/components/ui/checkbox";
// import { Edit, Trash2, Check } from "lucide-react";
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
// import React, { useState } from 'react';
// import FieldEdit from "./FieldEdit";

// function FormUi({ jsonForm, onFieldUpdate, onFormDetailsUpdate }) {
//   if (!jsonForm || !jsonForm.response || jsonForm.response.length === 0) {
//     return <div>No form data available</div>;
//   }

//   const [editingField, setEditingField] = useState(null);
//   const formData = jsonForm.response[0];

//   const handleEdit = (field) => {
//     setEditingField(field);
//   };

//   const handleSave = () => {
//     setEditingField(null);
//   };

//   const getFieldValue = (field, key) => {
//     return field[key] || field[key.toLowerCase()] || field[key.toUpperCase()];
//   };

//   const getOptions = (field) => {
//     return (
//       getFieldValue(field, "options") ||
//       getFieldValue(field, "FormControl") ||
//       []
//     );
//   };

//   const renderField = (field) => {
//     const fieldType = getFieldValue(field, "fieldType");
//     const fieldName =
//       getFieldValue(field, "FormField") || getFieldValue(field, "fieldName");
//     const options = getOptions(field);

//     switch (fieldType.toLowerCase()) {
//       case "dropdown":
//       case "select":
//         return (
//           <select
//             id={fieldName}
//             name={fieldName}
//             className="w-full p-2 border rounded"
//             required={field.required}
//           >
//             <option value="">{field.placeholderName}</option>
//             {options.map((option, index) => (
//               <option key={index} value={option}>
//                 {option}
//               </option>
//             ))}
//           </select>
//         );
//       case "text":
//       case "email":
//       case "number":
//       case "date":
//       case "tel":
//       case 'Tel':
//         return (
//           <input
//             type={fieldType.toLowerCase()}
//             id={fieldName}
//             name={fieldName}
//             placeholder={field.placeholderName}
//             className="w-full p-2 border rounded"
//             required={field.required}
//           />
//         );
//       case "textarea":
//         return (
//           <textarea
//             id={fieldName}
//             name={fieldName}
//             placeholder={field.placeholderName}
//             className="w-full p-2 border rounded"
//             required={field.required}
//           ></textarea>
//         );
//       case "radio":
//         return (
//           <RadioGroup>
//             {options.map((option, index) => (
//               <div key={index} className="flex items-center space-x-2">
//                 <RadioGroupItem value={option} id={`${fieldName}-${option}`} />
//                 <label htmlFor={`${fieldName}-${option}`}>{option}</label>
//               </div>
//             ))}
//           </RadioGroup>
//         );
//       case "checkbox":
//         if (
//           fieldName === "agreeTerms" ||
//           !Array.isArray(options) ||
//           options.length === 0
//         ) {
//           return (
//             <div className="flex items-center space-x-2">
//               <Checkbox
//                 id={fieldName}
//                 name={fieldName}
//                 required={field.required}
//               />
//               <label htmlFor={fieldName}>{field.formLabel}</label>
//             </div>
//           );
//         } else {
//           return (
//             <div className="space-y-2">
//               {options.map((option, index) => (
//                 <div key={index} className="flex items-center space-x-2">
//                   <Checkbox id={`${fieldName}-${index}`} />
//                   <label htmlFor={`${fieldName}-${index}`}>{option}</label>
//                 </div>
//               ))}
//             </div>
//           );
//         }
//       case "scale":
//         return (
//           <div>
//             <input
//               type="range"
//               id={fieldName}
//               name={fieldName}
//               min={field.min}
//               max={field.max}
//               step={field.step}
//               className="w-full"
//               required={field.required}
//             />
//             <div className="flex justify-between mt-2">
//               {field.labels.map((label, index) => (
//                 <span key={index} className="text-sm">
//                   {label}
//                 </span>
//               ))}
//             </div>
//           </div>
//         );
//       default:
//         return null;
//     }
//   };

//   const renderEditableField = (field, value, onChange) => {
//     if (editingField === field) {
//       return (
//         <div className="flex items-center justify-center">
//           <input
//             className="flex-grow font-bold text-center text-2xl text-primary"
//             value={value}
//             onChange={onChange}
//             autoFocus
//           />
//           <Check className="w-5 h-5 ml-2 cursor-pointer text-green-500" onClick={handleSave} />
//         </div>
//       );
//     }
//     return (
//       <div className="flex items-center justify-center relative">
//         <span className="font-bold text-center text-2xl  w-full">{value}</span>
//         <div className="absolute right-0">
//           <Edit className="inline-block w-5 h-5 mr-2 cursor-pointer" onClick={() => handleEdit(field)} />
//           <Trash2 className="inline-block w-5 h-5 cursor-pointer text-primary" />
//         </div>
//       </div>
//     );
//   };
  

//   return (
//     <div className="w-full  mx-auto">
//       {renderEditableField('formHeading', formData.formHeading, 
//         (e) => onFormDetailsUpdate('formHeading', e.target.value))}
//       {renderEditableField('formTitle', formData.formTitle, 
//         (e) => onFormDetailsUpdate('formTitle', e.target.value))}
//       {renderEditableField('formSubheading', formData.formSubheading, 
//         (e) => onFormDetailsUpdate('formSubheading', e.target.value))}

//       <form className="w-full">
//         {formData.fields.map((field, index) => (
//           <div key={index} className="mb-2 flex items-end">
//             <div className="flex-grow">
//               <label
//                 htmlFor={getFieldValue(field, "FormField")}
//                 className="block mb-2"
//               >
//                 {field.formLabel}
//               </label>
//               {renderField(field)}
//             </div>
//             <div className="ml-4">
//               <FieldEdit
//                 defaultValue={field}
//                 onUpdate={(value) => onFieldUpdate(value, index)}
//               />
//             </div>
//           </div>
//         ))}
//       </form>
//     </div>
//   );
// }

// export default FormUi;
